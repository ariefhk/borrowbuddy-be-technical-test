// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  ADMIN
}

model User {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  name      String
  email     String
  password  String
  token     String?
  role      Role      @default(MEMBER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  borrow    Borrow[]
  penalty   Penalty[]

  @@map("users")
}

model Book {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  title       String
  author      String
  stock       Int
  isAvailable Boolean      @map("is_available")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  borrowBook  BorrowBook[]

  @@map("books")
}

model Borrow {
  id             Int          @id @default(autoincrement())
  userId         Int          @map("user_id")
  user           User         @relation(fields: [userId], references: [id])
  borrowDate     DateTime     @map("borrow_date")
  returnDate     DateTime?    @map("return_date")
  penaltyApplied Boolean      @default(false) @map("penalty_applied")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  borrowBook     BorrowBook[]

  @@map("borrows")
}

model BorrowBook {
  id        Int      @id @default(autoincrement())
  borrowId  Int      @map("borrow_id")
  borrow    Borrow   @relation(fields: [borrowId], references: [id])
  bookId    Int      @map("book_id")
  book      Book     @relation(fields: [bookId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("borrow_books")
}

model Penalty {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  startDate DateTime @default(now())
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("penalties")
}
